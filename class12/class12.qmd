---
title: "class 12 - transcriptomics"
author: "jack olmstead"
format: gfm
---

In today's class, we will be working with published, bulk RNA-seq data from an experiment where airway smooth-muscle cells were treated with dexamethasome, a synthetic gluococorticoid commonly used to treat asthma (Himes et al. 2014)
```{r}
#| message: false
library("DESeq2")
```
## Group counts
```{r import}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
meta <- read.csv("airway_metadata.csv")

head(counts)
head(meta)
```


First, we need to check that the metadata match the order of our samples
```{r}
if( !all(meta$id == colnames(counts)) ) {
  warning("the metadata and count column names don't match up!")
}
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have? 

```{r}
length(grep("control", meta$dex))
```

Let's start with some simple differential expression analysis
```{r}
#| message: false
library(dplyr)
```

```{r}
control <- meta %>% filter(dex=="control")
control.counts <- counts %>% select(control$id)
control.mean <- rowMeans(control.counts)
head(control.mean)
```
> Q3. How would you make the above code in either approach more robust?

Using rowMeans like I did here, instead of rowSums, like the code in the lab guide, makes the code much more robust to sample additions or subtractions from either group.

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- meta %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id)
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

To keep us organized, let's make a new data.frame called `meancounts` with our control and treated means
```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(control.mean, treated.mean)
```

> Q5 (b). You could also use the ggplot2 package to make this figure producing the plot below

```{r}
library(ggplot2)

p <- ggplot(meancounts) +
  aes(x=control.mean, y=treated.mean) +
  geom_point(alpha=0.1) +
  scale_x_log10() +
  scale_y_log10()
p + geom_abline(color="red")
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(control.mean, treated.mean, log="xy")
```

Let's calculate log2 FC for our gene list.
```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
```

Before we move on, we should get rid of gene rows that have any 0 values, because they will mess up our log2-FC values
```{r}
to.keep <- rowSums(meancounts[,1:2] == 0) == 0
mycounts <- meancounts[to.keep,]
nrow(mycounts)
```


```{r}
# zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
# 
# to.rm <- unique(zero.vals[,1])
# mycounts <- meancounts[-to.rm,]
# head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind argument returns a matrix of the same size as the input, which allows us to assess for unique values among rows.

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
up <- sum(mycounts$log2fc >= 2)
down <- sum(mycounts$log2fc <= -2) 

sprintf("Upregulated: %i      Downregulated: %i", up, down)
```

> Q10. Do you trust these results? Why or why not?

I don't trust these results, because they're comparing means between two groups without accounting for variability within-group. I.e., there is no statistical test!

```{r}
p2 <- ggplot(meancounts) +
  aes(log2fc) +
  geom_density()
p2 + geom_vline(xintercept = c(-4, 4), linetype=2)
```



## DESeq2
```{r}
#| message: false

library("DESeq2")
```

Like most Bioconductor packages, DESeq wants its input in a very particular format
```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = meta, 
                              design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- as.data.frame(results(dds))
head(res)
```

## Volcano plot
Let's make a main summary figure for our DESeq analysis
```{r}
p <- ggplot(as.data.frame(res)) +
  aes(x=log2FoldChange, y=log10(padj)) +
  geom_point() +
  scale_y_reverse()

p <- p + geom_hline(yintercept=0.05, linetype=2) + geom_vline(xintercept=c(-2, 2), linetype=2)
p
```

Let's make a color vector and a gene-symbol vector to spice up the volcano plot!
```{r}
my.colors <- rep("grey", nrow(res))
my.colors[res$log2FoldChange >= 2 & res$padj < 0.05] <- "red"
my.colors[res$log2FoldChange <= -2 & res$padj < 0.05] <- "blue"

# my.labels <- rep("", nrow(res))
# my.labels[ res$log2FoldChange >= 2 | res$log2FoldChange <= -2 & res$padj < 0.05 ] <- 
#   rownames(res[ res$log2FoldChange >= 2 | res$log2FoldChange <= -2 & res$padj < 0.05 ])
```

```{r}
p <- ggplot(as.data.frame(res)) +
  aes(x=log2FoldChange, y=-log10(padj)) +
  geom_point(color=my.colors, alpha=0.4)

p + geom_hline(yintercept=0.05, linetype=2) + geom_vline(xintercept=c(-2, 2), linetype=2)
  
```

```{r}
ggplot(as.data.frame(res)) +
  aes(padj) +
  geom_histogram() +
  scale_x_log10()
```

## Annotation transcripts
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys = rownames(res), # our current gene names
                     keytype = "ENSEMBL", # current format
                     column = "SYMBOL", # destination format
                     multiVals = "first" # do we want to collapse information from multiple transcripts into 1 symbol?
                     )
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called 

```{r}
translate <- function(fmt) {
  mapIds(org.Hs.eg.db,
         keys = rownames(res), # our current gene names
         keytype = "ENSEMBL", # current format
         column = fmt, # destination format
         multiVals = "first" # do we want to collapse information from multiple transcripts into 1 symbol?
         )
}
```

```{r}
res$entrez <- translate("ENTREZID")
res$uniprot <- translate("UNIPROT")
res$genename <- translate("GENENAME")
```

## Save results for now
```{r}
write.csv(res, file="results_annotated.csv")
```


## Pathway analysis
```{r}
head(res)
```

```{r}
fc <- res$log2FoldChange
names(fc) <- res$entrez
```

```{r}
#| message: false
library(gage)
library(gageData)
library(pathview)
```

```{r}
data(kegg.gs)

gs <- gage(fc, gsets=kegg.gs)
```

Let's check out our output object
```{r}
attributes(gs)
head(gs$greater)
```

```{r}
pathview(gene.data = fc, pathway.id = "hsa00790")
```

![](hsa00790.pathview.png)


















